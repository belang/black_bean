========
可计算性
========

处理器
======
一个计算任务是由许多单独的计算构成。
任务的描述由两部分构成：计算（个体）和计算的组合（关系）。
一个能够按描述完成计算任务的机器也由两部分构成：运算器件和运算组合控制器件。
这样的机器称为处理器，前一器件称为运算器，后者称为控制器，任务的描述称为指令。

指令也分为两种：计算和控制。各种指令的集合称为指令集。
每种处理器结构对应一种指令集。
根据计算能力，将指令集分为两种：图灵完备和非完备。
一个通用处理器一定是图灵完备的（要完成各种任务）。
计算指令是完成一个计算动作。
在算法上，很多复杂计算可以由简单计算组合而成。
为了减少描述任务使用指令（程序）的长度，为一些常用的计算设计了专门的计算指令
（对应着专门的运算器）。
而一些较为复杂的有针对性的计算（如图形，视频解码等），则设计了专门的处理器，
称为数字信息处理器（DSP，Digital Signal Processor）。
DSP中对复杂的计算进行性能的优化，因而在专业计算领域表现突出。


指令集
======
指令集是用来描述计算任务的，被称为计算机语言，是处理器的人机接口。
早期的计算机指令是0、1组合，称为机器码，是处理器能够直接执行的指令。
现在，对于软件人员，最低层的计算机语言一般是汇编，
但汇编不完全是机器码，也不是完全与机器码一一对应。
在汇编与机械码之间有个过程——编译。
X86结构的汇编程序在经过编译的时候，有的汇编指令会被译成多条机器码。
这些机器码是最基本的指令集，称为机器指令集。

在处理器模型（通常是计算模型）中，一条指令是完成一个计算。
但是一条机械指令并不是一个计算，而是一个动作，可能是多个动作构成一个计算。
例如常见的汇编加法指令ADD R1 R2 R3（将寄存器R1和R2的值相加，结果存到R3），
可以分解成一系列动作：取R1、R2的值到加法器；计算过程；将结果存储在R3中。
如果不考虑计算过程所需要的时间，加法汇编指令至少需要两个时钟周期（称为两拍）。

有的处理器直接使用汇编指令作为处理器输入指令，有的不是。
无论哪种，在处理器中，指令都是多拍完成，通过流水级实现。
对于精简指令集（RISC）结构处理器，指令长度固定，流水级清晰，下文以此为例。
嵌入式处理器中较常见的一种流水级是取指、译码、执行。
通用处理器中流水级一般是取指、译码、发射、执行和写回。
处理器频率越高，每级流水的逻辑越短，则流水级越长。

之前是从人的角度（指令）来分析处理器结构，下面从硬件动作角度来分析。
出于稳定性考虑，硬件数字部分一般都是用时序逻辑实现。
整个计算过程是从寄存器取数据，送到计算逻辑，再存到寄存器。
这一过程有三个基本动作：读寄存器、组合逻辑、写寄存器。
读寄存器对应着取指、发射时的取数据；
组合逻辑对应着执行；写寄存器对应着写回。
数据传输也需要一定的时间，需要确定送到哪个计算逻辑中，它对应着译码和发射。
每个硬件动作都是一拍完成的。

硬件实现
========

对于处理器，每个动作是一条机器指令，而每个指示也是一条机器指令。

一个计算是指令的组合。一个任务是计算的组合。

使用每拍单动作的方式，更加灵活。复杂的指令，可以由动作指令编码而成。

tips
====

1. 读取寄存器与读取运算模块输出数据的操作是一致的。

idear
=====

1. 每条汇编指令由多条顺序机器指令构成，标识只在第一条机器指令。
2. 部分汇编指令顺序执行，有些汇编指令跳转，标识只在跳入点。

名词解释
========

+----------------+-----------------------------------------------------------+
| 名称           | 说明                                                      |
+================+===========================================================+
| 起点设备、端口 | （source）数据来源，输出数据的设备、端口                  |
+----------------+-----------------------------------------------------------+
| 终点设备、端口 | （target）数据去向，使用数据的设备、端口                  |
+----------------+-----------------------------------------------------------+
