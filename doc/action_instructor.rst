==================
Action Instruction 
==================

Introduction
============
这里设计的指令是硬件执行的指令。它是传统意义的指令集编译之后的指令。

Design
======

单动作指令设计灵活，更能体现硬件信号传输过程，所以以单动作指令进行设计。

硬件基本操作是读和写。操作内容是地址（端口）和数据。操作对象有内存、寄存器、运算器、外设。
由此设计单动作指令格式为：读、写，对象，地址（立即数）。
无论读写，默认数据在对应的数据总线中。
每一对读写动作完成一次数据搬运。因为读写之间的数据缓存在数据总线上，
所以读写操作必须成对出现，而且连续读写。如果不连续，则需要缓存。

单动作指令通过向器件某些端口发送使能来实现，简称动作。
每个动作由7位构成。

动作列表:

    Action is instruction, and the data port exports data to or imports data
    from the data bus.

+-------------+------------+-------------------+-----------------+--------------------------------+
| 类型type    | 器件device | data port         | 动作action      | 功能function                   |
+=============+============+===================+=================+================================+
| bus device  | memory     | ren               | r_mem           |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | wen               | w_mem           |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
| check state | validtiy   | memory read_valid | c_memery_read   | multi circle needed            |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | addition carry    | c_carry_add     |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
| computing   | addition   | addend1           | w_addition_a1   |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | addend2           | w_addition_a2   |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | summary           | r_addition_sum  |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             | comparator | data1             | w_comparator_d1 |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | data2             | w_comparator_d2 |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | result            | r_comparator_re |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
| controller  | ir_pointer | address           | s_transfer_addr | jump address                   |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | condition         | s_transfer_cond | data a                         |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | target            | s_transfer_tar  | data b                         |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            | relationship      | s_transfer_rel  | =,>,<,...                      |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             | ir_queue   |                   | load_ir_block   | load one ir block from IR cash |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            |                   | set_data        | set data to data bus from ir   |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            |                   |                 |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            |                   |                 |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+
|             |            |                   |                 |                                |
+-------------+------------+-------------------+-----------------+--------------------------------+

说明::

    switch: next ir_address is the 'address' when the raltionship of 
    'condition' and 'target' matches the requirement--'relationship'.

Actions
=======

Load and Excute Instruction
---------------------------

每个动作由8位构成：最低位指示此动作是使能还是数据，高7位是数值。
这样做的优点是，数据位宽扩展后，指令高位添加0，指令仍然能兼容。
带符号数据，最低位是标志位，扩展时，高位添加标志位。

跳转指令由跳转器计算地址，写入指令地址寄存器端口实现。
当选择跳转器的跳转方式端口时，默认上一拍是比较，将比较器的结果直接读入。
标志位使用统一端口。判断标志位时，先读到比较器。

Set Immediate Data
------------------

In the instruction, there are data. Most action instructions have no operands,
the data to be processed is on the data bus. So how to sent the data in
instruction queue to the data bus? There are two methods:

1. Use one bit of the instruction as a instruction or data flag.

2. *Set one action to indicate the next line is instruction or data.*

Here chooses the second method. The data width will grow fast than the
instruction. The data width is multiple of the instruction will be good,
because in this case, some instruction lines will consist of a data.
