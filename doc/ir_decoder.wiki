= 状态 =

当前数据匹配IR，匹配成功后，进入读取数据状态，


当解码模块返回指令读取完成时，标识下一数据是指令。


两层状态：

主状态——指令状态：当前指令
次状态——指令执行状态：取指、取指令数据、发射、运算等

每个子状态都有独立的状态控制器。

= 初始化指令 =

动作：mem -> data -> reg

// 每拍读一行。读mem需要多行。
L1: mem_read_mem, addr
    if mem_data_ready
      mem_read_data, data_reg_write addr
      jump L1
// 
L1: data_read addr, ir_write addr

【读取数据到mem中，完成后，向控制器发送预备完成信号。此信号只在复位后高一次。】

- 当预备完成时，加载指令到寄令

控制器输出：

| ctrl     | addr | data_bus | inner     |
|----------|------|----------|-----------|
| mem ren | a1   |          |           |
| ir wen   | a2   | d1       | counter=1 |
| mem ren | a3   |          |           |
| ir wen   | a4   | d2       | counter=2 |
|          |      |          |           |
 
 

= 加载 =
| state | in | out                                 | next state |
|-------|----|-------------------------------------|------------|
| 取指  |    | irp=next                            | 取参0      |
| 取参0 | ir | irp=next,                           | 取参1      |
| 取参1 | p0 | irp=next, addr=p0, mem_ren=1       | 取参2      |
| 取参2 | p1 | irp=next, addr=p1, regfile_ir_wen=1 | 执行       |
| 执行  | p2 | irp=p2?next:irp, 循环加载           | 执行、取指 |

 



= 端口说明 =
| D | 名称     | 说明     |
|---|----------|----------|
| i | clk      |          |
| i | rst_n    |          |
| i | data_in  | 外部数据 |
| i | ir       | 寄令数据 |
| o | irp      | 寄令地址 |
| o | data_out | 数据     |
| o | ctrl_bus | 控制总线 |
|   |          |          |
|   |          |          |


