========
机器指令
========

说明
====
这里设计的指令是硬件执行的指令。它是传统意义的指令集编译之后的指令。

指令设计
========

以硬件每个执行动作为基本单位进行设计。
指令流水级为取指、译码、发射、执行、写回。
不管一拍还是多拍完成，整个流水级要完整，则数据通道要足够。
很多功能需要多个操作数，功能结果也可能是多个操作数，
要一拍完成，则数据通道要多条。
同时，寄存器只能一次读一条数据，或写一条数据，
要一拍完成，则读写要分离，读写数据通道都不只一条。
例如一条加法指令可以拆分成：取数1、取数2、计算、写结果，四个步骤。
要实现一拍或流水，需要两个读数通道，一个写通道。

还有一种选择是拆分指令。四个步骤分成四个指令，顺序执行。
单动作指令设计灵活，更能体现硬件信号传输过程，所以以单动作指令进行设计。

硬件基本操作是读和写。操作内容是地址（端口）和数据。操作对象有内存、寄存器、运算器、外设。
由此设计单动作指令格式为：读、写，对象，地址（立即数）。
无论读写，默认数据在对应的数据总线中。
每一对读写动作完成一次数据搬运。因为读写之间的数据缓存在数据总线上，
所以读写操作必须成对出现，而且连续读写。如果不连续，则需要缓存。

单动作指令
==========
将每个端口的一个响应称为动作。指令是指完成一个功能。
每个动作由8位构成：最低位指示此数值是指令还是数据，高7位是数值。

端口列表
--------

跳转指令由跳转器计算地址，写入令寄端口实现。
当选择跳转器的跳转方式端口时，默认上一拍是比较，将比较器的结果直接读入。

标志位使用统一端口。判断标志位时，先读到比较器。

器件划分
~~~~~~~~

端口：寄存器
~~~~~~~~~~~~

================  ======  ====
名称              简称    说明 
================  ======  ====
指令寄存器读      令读
指令寄存器写数据  令数据
指令寄存器写地址  令写
数据寄存器读      数读
数据寄存器写数据  数数据 
数据寄存器写地址  数写 
================  ======  ====

端口：外设
~~~~~~~~~~

============  ====  ==================================
名称          简称  说明                                   
============  ====  ==================================
内存指令            向内存控制器发送指令，控制内存读写
内存数据读          读取内存控制器缓存的数据，一次一行
内存数据写          向内存控制器缓存写入数据，一次一行
内存数据有效        内存数备 
============  ====  ==================================


端口：运算
~~~~~~~~~~
负数用补码表示，则没有减法。

========  ====  ====
名称      简称  说明 
========  ====  ====
被加数    加基  写     
加数      加累  写     
加结果    加和  读     
加进位    进位  读     
被比较数  比尺  写     
比较数    比量  写     
比较结果  关系  读   
========  ====  ====

端口：控制
~~~~~~~~~~

========  ====  ========================  
名称      简称  说明                      
========  ====  ========================  
大于跳    大跳  写，输入的是跳转      
小于跳    小跳  写                        
等于跳    同跳  写                        
不等于跳  异跳  写                        
直接跳    直跳  写                        
跳转地址  跳达  写                        
等待            写，等待某个值为高（有效）
停              空，代表停止              
========  ====  ========================  

指令动作
--------
加载数据动作由跳转、计数、读、写、等待构成。

写：模块输入， 读：模块输出。
前拍数据，后拍数据指的是在此动作之前，数据总线上数据代表意义。
如果前拍数据有效（有名称），代表此动作需要前置动作准备数据（例如读寄）。
如果后拍数据有效（有名称），代表此动作后输出有效数据，后续动作可以使用（如写寄）。

+------+----------+--------+----------+------------------+
| 指令 | 前拍数据 | 端口   | 后拍数据 | 说明             |
+======+==========+========+==========+==================+
| 读寄 | 读地址   | 令读   | 读出数据 |                  |
+------+----------+--------+----------+------------------+
| 写寄 | 写数据   | 令数据 |          |                  |
|      +----------+--------+----------+------------------+
|      | 写地址   | 令写   |          |                  |
+------+----------+--------+----------+------------------+
| 加   | 被加数   | 加基   |          |                  |
|      +----------+--------+----------+------------------+
|      | 加数     | 加累   | 和       | 直接输出         |
|      +----------+--------+----------+------------------+
|      |          | 加进   | 进位     |                  |
+------+----------+--------+----------+------------------+
| 比较 | 尺       | 比尺   |          |                  |
|      +----------+--------+----------+------------------+
|      | 量       | 比量   | 关系     |                  |
+------+----------+--------+----------+------------------+
|      | 关系     | 方式   |          | 比较结果和方式   |
|      +----------+--------+----------+------------------+
| 跳转 | 地址     | 跳达   | 跳转地址 | 进行跳转         |
+------+----------+--------+----------+------------------+
| 设   |          | 8'bx0  | 8'b0x    | 设置立即数       |
+------+----------+--------+----------+------------------+
| 标志 | 标志端口 | 标志   | 标志数值 | 读取某个标志     |
+------+----------+--------+----------+------------------+

加载 
缓存 00000001 尺     运算   
缓存 8'h9     0      数寄   
外设 内存数备 量     运算   
运算 较       异跳   控制   
数寄 0        跳达   控制   
运算 较       *      *      


